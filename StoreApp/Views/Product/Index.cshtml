@model StoreApp.Models.ProductListViewModel
@section Scripts
    {
    <script>
        $(document).ready(function () {
            $('input[type="number"]').on('input', function () {
                var inputValue = $(this).val();
                var sanitizedValue = inputValue.replace(/[^0-9]/g, '');
                $(this).val(sanitizedValue);
            });
            // li elementlerine hover eklendiðinde

            $('#minPriceInput').on('input',function(){
                var minPrice = parseFloat($(this).val());
                if (!isNaN(minPrice) && minPrice<0) {
                    $('#minPriceInput').val(0);
                }
            });
            // MinPrice alanýnýn deðiþimi
            $('#minPriceInput').on('blur', function () {
                var minPrice = parseFloat($(this).val());
                var maxPrice = parseFloat($('#maxPriceInput').val());
                // Eðer MinPrice alanýna geçerli bir sayý girildiyse ve MaxPrice alaný MinPrice'dan küçükse
                if (!isNaN(minPrice) && !isNaN(maxPrice) && minPrice > maxPrice) {
                    // MaxPrice alanýný MinPrice+10 olarak güncelle
                    $('#maxPriceInput').val(minPrice > 0 ? minPrice + 10 : 10);
                    $('#minPriceInput').val(minPrice > 0 ? minPrice:0);
                }
            });

            // MaxPrice alanýnýn deðiþimi
            $('#maxPriceInput').on('blur', function () {
                var minPrice = parseFloat($('#minPriceInput').val());
                var maxPrice = parseFloat($(this).val());

                // Eðer MaxPrice alanýna geçerli bir sayý girildiyse ve MaxPrice alaný MinPrice'dan küçükse
                if (!isNaN(minPrice) && !isNaN(maxPrice) && maxPrice < minPrice) {
                    // MaxPrice alanýný MaxPrice-10 olarak güncelle
                    $('#minPriceInput').val(maxPrice>10 ?maxPrice - 10:0);
                }
            });
        });
    </script>
}
<div class="row">
    <div class="col-md-3">
        @await Component.InvokeAsync("CategoriesMenu")
        @await Component.InvokeAsync("ProductFilterMenu")
        <div lastest-product="3" ></div>
    </div>
    <div class="col-md-9">
        <div class="row my-3">
            @foreach(Product prd in Model.Products)
            {
                <partial name="_ProductCard" model="@prd"/>
            }
        </div>
    </div>
    <div class="text-center my-5">
        <div
            class="btn-group"
            page-class="btn"
            page-class-enabled="true"
            page-class-normal="btn-outline-secondary"
            page-class-selected="btn-secondary"
            page-model="@Model.Pagination"
            page-action="Index">

        </div>
    </div>
</div>
